// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NewItem should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NewItem
    handleChange={[MockFunction]}
    handleItem={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <button
          className="list-control"
        />,
        <textarea
          className="list-item"
          name="listText"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="Add an item . . ."
          value=""
        />,
        <button
          className="list-control delete-item"
        >
          X
        </button>,
      ],
      "className": "list-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "list-control",
        },
        "ref": null,
        "rendered": null,
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "list-item",
          "name": "listText",
          "onBlur": [Function],
          "onChange": [Function],
          "placeholder": "Add an item . . .",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "textarea",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "X",
          "className": "list-control delete-item",
        },
        "ref": null,
        "rendered": "X",
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="list-control"
          />,
          <textarea
            className="list-item"
            name="listText"
            onBlur={[Function]}
            onChange={[Function]}
            placeholder="Add an item . . ."
            value=""
          />,
          <button
            className="list-control delete-item"
          >
            X
          </button>,
        ],
        "className": "list-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "list-control",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "list-item",
            "name": "listText",
            "onBlur": [Function],
            "onChange": [Function],
            "placeholder": "Add an item . . .",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "textarea",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "X",
            "className": "list-control delete-item",
          },
          "ref": null,
          "rendered": "X",
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
